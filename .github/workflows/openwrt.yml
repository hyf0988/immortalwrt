name: Build OpenWrt 23.05.2 with Custom Packages

on:
  workflow_dispatch:
    inputs:
      target_device:
        description: 'Target device (e.g., x86_64, rpi-4)'
        required: true
        default: 'x86_64'
      make_threads:
        description: 'Threads for compilation (1-4, smaller is more stable)'
        required: true
        default: '2'

env:
  OPENWRT_VERSION: '23.05.2'
  REPO_URL: 'https://github.com/openwrt/openwrt'
  REPO_BRANCH: 'openwrt-23.05'
  ROOTFS_PARTSIZE: '2048'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Maximize disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache
          sudo apt-get clean
          sudo swapoff -a
          sudo rm -f /swapfile
          df -h
      
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ccache curl file g++ gawk \
            git libncurses5-dev libssl-dev python3 unzip zlib1g-dev \
            subversion libxml-parser-perl default-jre-headless

      - name: Clone OpenWrt Source
        run: |
          git clone --depth 1 -b ${{ env.REPO_BRANCH }} ${{ env.REPO_URL }} openwrt
          cd openwrt
          
          # 启用并行下载以加速
          echo "CONFIG_DOWNLOAD_FOLDER=\"$(pwd)/dl\"" > .config
          
          # 更新 feeds
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: Configure OpenWrt
        run: |
          cd openwrt
          
          # 克隆 OpenClash
          git clone https://github.com/vernesong/OpenClash.git package/openclash || echo "Failed to clone OpenClash"
          
          # 克隆 PassWall 及其依赖
          mkdir -p package/passwall
          git clone https://github.com/xiaorouji/openwrt-passwall.git package/passwall/luci-app-passwall || echo "Failed to clone PassWall"
          git clone -b packages https://github.com/xiaorouji/openwrt-passwall.git package/passwall/packages || echo "Failed to clone PassWall packages"
          
          # 克隆 Argon 主题
          git clone https://github.com/jerrykuku/luci-theme-argon.git package/luci-theme-argon || echo "Failed to clone Argon theme"

          # 更新 feeds 以包含新添加的包
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          # 生成精简的配置
          cat << EOF > .config
          CONFIG_TARGET_${{ github.event.inputs.target_device }}=y
          CONFIG_TARGET_${{ github.event.inputs.target_device }}_Generic=y
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-app-firewall=y
          CONFIG_PACKAGE_luci-app-opkg=y
          CONFIG_PACKAGE_luci-app-openclash=y
          
          # PassWall 及其依赖
          CONFIG_PACKAGE_luci-app-passwall=y
          CONFIG_PACKAGE_chinadns-ng=y
          CONFIG_PACKAGE_dns2socks=y
          CONFIG_PACKAGE_tcping=y
          CONFIG_PACKAGE_v2ray-core=y
          CONFIG_PACKAGE_xray-core=y
          CONFIG_PACKAGE_brook=y
          CONFIG_PACKAGE_trojan-plus=y
          CONFIG_PACKAGE_shadowsocks-libev-ss-local=y
          CONFIG_PACKAGE_shadowsocks-libev-ss-redir=y
          
          # 网络驱动
          CONFIG_PACKAGE_kmod-r8169=y
          CONFIG_PACKAGE_kmod-usb-net=y
          CONFIG_PACKAGE_kmod-usb-net-rtl8152=y
          
          # 其他软件包
          CONFIG_PACKAGE_openssh-sftp-server=y
          CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_LUCI_LANG_zh_Hans=y
          
          # 系统配置
          CONFIG_LUCI_THEME_DEFAULT="argon"
          CONFIG_TARGET_ROOTFS_PARTSIZE=${{ env.ROOTFS_PARTSIZE }}
          CONFIG_TARGET_ROOTFS_EXT4FS=y
          CONFIG_TARGET_ROOTFS_SQUASHFS=y
          CONFIG_CCACHE=y
          
          # 精简配置
          CONFIG_KERNEL_KALLSYMS=n
          CONFIG_KERNEL_DEBUG_INFO=n
          CONFIG_KERNEL_DEBUG_KERNEL=n
          CONFIG_KERNEL_SWAP=n
          EOF
          
          # 应用配置
          make defconfig

      - name: Download package source
        run: |
          cd openwrt
          make download -j8
          make download -j1 V=s

      - name: Build Firmware (Memory-Safe Mode)
        run: |
          cd openwrt
          
          # 分阶段编译
          echo "::group::Building toolchain"
          make tools/install -j${{ github.event.inputs.make_threads }}
          make toolchain/install -j${{ github.event.inputs.make_threads }}
          echo "::endgroup::"
          
          echo "::group::Building target"
          make target/compile -j${{ github.event.inputs.make_threads }} || make target/compile -j1 V=s
          echo "::endgroup::"
          
          echo "::group::Building packages"
          make package/compile -j${{ github.event.inputs.make_threads }} || make package/compile -j1 V=s
          echo "::endgroup::"
          
          echo "::group::Installing packages"
          make package/install -j${{ github.event.inputs.make_threads }} || make package/install -j1
          echo "::endgroup::"
          
          echo "::group::Building firmware"
          make target/install -j${{ github.event.inputs.make_threads }} || make target/install -j1
          make package/index
          echo "::endgroup::"
          
          # 显示生成的固件文件
          echo "=== Generated Firmware Files ==="
          ls -lh bin/targets/*/*/

      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-firmware-${{ github.event.inputs.target_device }}
          path: openwrt/bin/targets/*/*/openwrt-*.*
          
      - name: Upload Config
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-config-${{ github.event.inputs.target_device }}
          path: openwrt/.config
