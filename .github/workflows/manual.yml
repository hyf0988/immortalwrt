# This is a basic workflow that is manually triggered

name: Build ImmortalWrt 23.05.3 with Custom Packages

on:
  workflow_dispatch:
    inputs:
      target_device:
        description: 'Target device (e.g., x86_64, rpi-4)'
        required: true
        default: 'x86_64'

env:
  IMMORTALWRT_VERSION: '23.05.3'
  REPO_URL: 'https://github.com/immortalwrt/immortalwrt'
  REPO_BRANCH: 'openwrt-23.05'
  ROOTFS_PARTSIZE: '3072'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 清理磁盘空间
      - name: Maximize disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo apt-get clean
          df -h

      # 创建模拟磁盘并配置 LVM
      - name: Create simulated physical disk and LVM
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          [ "$mnt_size" -lt 1 ] && mnt_size=1
          [ "$root_size" -lt 1 ] && root_size=1
          sudo truncate -s "${mnt_size}G" /mnt/mnt.img
          sudo truncate -s "${root_size}G" /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img || sudo losetup -f /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img || sudo losetup -f /root.img
          sudo pvcreate /dev/loop6 /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R $USER:$USER /builder
          df -Th

      # 检出代码
      - name: Checkout
        uses: actions/checkout@v3

      # 设置构建环境
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ccache curl file g++ gawk \
            git libncurses5-dev libssl-dev python3 unzip zlib1g-dev

      # 下载 ImmortalWrt 源码
      - name: Clone ImmortalWrt Source
        run: |
          cd /builder
          git clone --depth 1 -b ${{ env.REPO_BRANCH }} ${{ env.REPO_URL }} immortalwrt
          cd immortalwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # 动态配置并克隆额外软件包
      - name: Configure ImmortalWrt
        run: |
          cd /builder/immortalwrt
          git clone https://github.com/vernesong/OpenClash.git package/openclash || echo "Failed to clone OpenClash"
          git clone https://github.com/xiaorouji/openwrt-passwall.git package/passwall || echo "Failed to clone Passwall"
          git clone https://github.com/immortalwrt/homeproxy.git package/homeproxy || echo "Failed to clone Homeproxy"
          git clone https://github.com/lisaac/luci-app-dockerman.git package/dockerman || echo "Failed to clone Dockerman"
          git clone https://github.com/kenzok8/luci-theme-argon.git package/luci-theme-argon || echo "Failed to clone Argon theme"
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          # 动态生成完整配置
          cat << EOF > .config
          CONFIG_TARGET_${{ github.event.inputs.target_device }}=y
          CONFIG_TARGET_${{ github.event.inputs.target_device }}_Generic=y
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-app-firewall=y
          CONFIG_PACKAGE_luci-app-opkg=y
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-app-passwall=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray=y
          CONFIG_PACKAGE_luci-app-homeproxy=y
          CONFIG_PACKAGE_luci-app-dockerman=y
          CONFIG_PACKAGE_docker=y
          CONFIG_PACKAGE_dockerd=y
          CONFIG_PACKAGE_kmod-r8169=y
          CONFIG_PACKAGE_kmod-usb-net=y
          CONFIG_PACKAGE_kmod-usb-net-rtl8152=y
          CONFIG_PACKAGE_openssh-sftp-server=y
          CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_LUCI_THEME_DEFAULT="argon"
          CONFIG_TARGET_ROOTFS_PARTSIZE=${{ env.ROOTFS_PARTSIZE }}
          CONFIG_TARGET_ROOTFS_EXT4FS=y
          CONFIG_TARGET_ROOTFS_SQUASHFS=y
          CONFIG_TARGET_INITRAMFS=y
          CONFIG_TARGET_INITRAMFS_COMPRESSION_GZIP=y
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_CCACHE=y
          CONFIG_V=s
          EOF
          make defconfig

      # 编译完整固件
      - name: Build Firmware
        run: |
          cd /builder/immortalwrt
          make -j$(nproc) V=s
          ls -lh bin/targets/*/*/

      # 上传固件
      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt-firmware-${{ github.event.inputs.target_device }}
          path: /builder/immortalwrt/bin/targets/*/*/immortalwrt-*.*
