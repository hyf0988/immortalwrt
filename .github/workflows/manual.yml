# This is a basic workflow that is manually triggered

name: Build ImmortalWrt 24.10.2 with Custom Packages

on:
  workflow_dispatch:
    inputs:
      target_device:
        description: 'Target device (e.g., x86_64, rpi-4)'
        required: true
        default: 'x86_64'
      make_threads:
        description: 'Compilation threads (1-4)'
        required: true
        default: '2'

env:
  IMMORTALWRT_VERSION: '24.10.2'
  REPO_URL: 'https://github.com/immortalwrt/immortalwrt'
  REPO_BRANCH: 'openwrt-24.10'
  ROOTFS_PARTSIZE: '2560'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 清理磁盘空间
      - name: Maximize disk space
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache
          sudo rm -rf /usr/local/lib/python* /usr/lib/jvm/* /usr/share/swift
          sudo apt-get clean
          df -h

      # 创建模拟磁盘并配置 LVM
      - name: Create simulated physical disk and LVM
        run: |
          mnt_size=$(expr $(df -h /mnt | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 1)
          root_size=$(expr $(df -h / | tail -1 | awk '{print $4}' | sed 's/[[:alpha:]]//g' | sed 's/\..*//') - 4)
          [ "$mnt_size" -lt 1 ] && mnt_size=1
          [ "$root_size" -lt 1 ] && root_size=1
          sudo truncate -s "${mnt_size}G" /mnt/mnt.img
          sudo truncate -s "${root_size}G" /root.img
          sudo losetup /dev/loop6 /mnt/mnt.img || sudo losetup -f /mnt/mnt.img
          sudo losetup /dev/loop7 /root.img || sudo losetup -f /root.img
          sudo pvcreate /dev/loop6 /dev/loop7
          sudo vgcreate github /dev/loop6 /dev/loop7
          sudo lvcreate -n runner -l 100%FREE github
          sudo mkfs.xfs /dev/github/runner
          sudo mkdir -p /builder
          sudo mount /dev/github/runner /builder
          sudo chown -R $USER:$USER /builder
          df -Th

      # 检出代码
      - name: Checkout
        uses: actions/checkout@v4

      # 设置构建环境
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential ccache curl file g++ gawk \
            git libncurses5-dev libssl-dev python3 unzip zlib1g-dev \
            subversion libxml-parser-perl default-jre-headless m4 flex \
            python3-dev python3-setuptools python3-pip rsync
          sudo apt-get clean

      # 下载 ImmortalWrt 源码 (24.10.2版本)
      - name: Clone ImmortalWrt Source
        run: |
          cd /builder
          git clone --depth 1 -b ${{ env.REPO_BRANCH }} ${{ env.REPO_URL }} immortalwrt
          cd immortalwrt
          git checkout v${{ env.IMMORTALWRT_VERSION }}
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      # 动态配置并克隆额外软件包
      - name: Configure ImmortalWrt
        run: |
          cd /builder/immortalwrt
          
          # Clone third-party packages
          git clone --depth 1 https://github.com/vernesong/OpenClash.git package/openclash || echo "Failed to clone OpenClash"
          git clone --depth 1 https://github.com/xiaorouji/openwrt-passwall.git package/passwall || echo "Failed to clone Passwall"
          git clone --depth 1 https://github.com/immortalwrt/homeproxy.git package/homeproxy || echo "Failed to clone Homeproxy"
          git clone --depth 1 https://github.com/lisaac/luci-app-dockerman.git package/dockerman || echo "Failed to clone Dockerman"
          git clone --depth 1 https://github.com/kenzok8/luci-theme-argon.git package/luci-theme-argon || echo "Failed to clone Argon theme"
          
          ./scripts/feeds update -a
          ./scripts/feeds install -a

          # 动态生成完整配置 - 24.10.2版本
          cat << EOF > .config
          CONFIG_TARGET_x86=y
          CONFIG_TARGET_x86_64=y
          CONFIG_TARGET_x86_64_DEVICE_generic=y
          
          # Basic LuCI
          CONFIG_PACKAGE_luci=y
          CONFIG_PACKAGE_luci-app-firewall=y
          CONFIG_PACKAGE_luci-app-opkg=y
          CONFIG_LUCI_LANG_zh_Hans=y
          
          # Theme
          CONFIG_PACKAGE_luci-theme-argon=y
          CONFIG_LUCI_THEME_DEFAULT="argon"
          
          # Proxy applications
          CONFIG_PACKAGE_luci-app-openclash=y
          CONFIG_PACKAGE_luci-i18n-openclash-zh-cn=y
          CONFIG_PACKAGE_luci-app-passwall=y
          CONFIG_PACKAGE_luci-i18n-passwall-zh-cn=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Xray=y
          CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Hysteria=y
          CONFIG_PACKAGE_luci-app-homeproxy=y
          CONFIG_PACKAGE_luci-i18n-homeproxy-zh-cn=y
          
          # Docker support
          CONFIG_PACKAGE_luci-app-dockerman=y
          CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=y
          CONFIG_PACKAGE_docker-ce=y
          CONFIG_PACKAGE_dockerd=y
          CONFIG_PACKAGE_docker-compose=y
          
          # Docker kernel support - 24.10 version
          CONFIG_DOCKER_CGROUP_OPTIONS=y
          CONFIG_DOCKER_NET_MACVLAN=y
          CONFIG_DOCKER_STO_EXT4=y
          CONFIG_DOCKER_OPTIONAL_FEATURES=y
          CONFIG_DOCKER_NET_ENCRYPT=y
          CONFIG_DOCKER_NET_OVERLAY=y
          CONFIG_DOCKER_NET_TFTP=y
          CONFIG_KERNEL_CGROUP_DEVICE=y
          CONFIG_KERNEL_CGROUP_FREEZER=y
          CONFIG_KERNEL_CGROUP_NET_PRIO=y
          CONFIG_KERNEL_CGROUP_PERF=y
          CONFIG_KERNEL_CGROUP_HUGETLB=y
          CONFIG_KERNEL_MEMCG_SWAP=y
          CONFIG_KERNEL_MEMCG_SWAP_ENABLED=y
          CONFIG_KERNEL_PROC_PID_CPUSET=y
          CONFIG_KERNEL_EXT4_FS_POSIX_ACL=y
          CONFIG_KERNEL_EXT4_FS_SECURITY=y
          CONFIG_KERNEL_FS_POSIX_ACL=y
          CONFIG_KERNEL_NET_CLS_CGROUP=y
          
          # Network drivers - Enhanced for 24.10
          CONFIG_PACKAGE_kmod-igb=y          # Intel 1G
          CONFIG_PACKAGE_kmod-e1000e=y       # Intel 1G
          CONFIG_PACKAGE_kmod-igc=y          # Intel 2.5G I226
          CONFIG_PACKAGE_kmod-r8169=y        # Realtek 1G
          CONFIG_PACKAGE_kmod-r8125=y        # Realtek 2.5G
          CONFIG_PACKAGE_kmod-i40e=y         # Intel 10G
          CONFIG_PACKAGE_kmod-usb-net=y
          CONFIG_PACKAGE_kmod-usb-net-rtl8152=y
          
          # USB and filesystem support
          CONFIG_PACKAGE_kmod-usb-core=y
          CONFIG_PACKAGE_kmod-usb-storage=y
          CONFIG_PACKAGE_kmod-fs-ext4=y
          CONFIG_PACKAGE_kmod-fs-ntfs=y
          CONFIG_PACKAGE_kmod-fs-vfat=y
          CONFIG_PACKAGE_kmod-fs-exfat=y
          CONFIG_PACKAGE_ntfs-3g=y
          
          # SSH and utilities
          CONFIG_PACKAGE_openssh-sftp-server=y
          CONFIG_PACKAGE_wget-ssl=y
          CONFIG_PACKAGE_curl=y
          CONFIG_PACKAGE_ca-certificates=y
          CONFIG_PACKAGE_htop=y
          CONFIG_PACKAGE_nano=y
          
          # System settings
          CONFIG_TARGET_KERNEL_PARTSIZE=64
          CONFIG_TARGET_ROOTFS_PARTSIZE=${{ env.ROOTFS_PARTSIZE }}
          CONFIG_TARGET_ROOTFS_EXT4FS=y
          CONFIG_TARGET_ROOTFS_SQUASHFS=y
          CONFIG_TARGET_INITRAMFS=y
          CONFIG_TARGET_INITRAMFS_COMPRESSION_GZIP=y
          CONFIG_TARGET_IMAGES_GZIP=y
          CONFIG_CCACHE=y
          EOF
          
          make defconfig

      # 编译完整固件
      - name: Build Firmware
        run: |
          cd /builder/immortalwrt
          make download -j8 || make download -j1 V=s
          make -j${{ github.event.inputs.make_threads }} V=s || make -j1 V=s
          ls -lh bin/targets/*/*/

      # 生成发布标签
      - name: Generate Release Tag
        id: tag
        run: |
          echo "release_tag=immortalwrt-${{ env.IMMORTALWRT_VERSION }}-$(date +"%Y.%m.%d-%H%M")" >> $GITHUB_OUTPUT
          echo "release_date=$(date +"%Y.%m.%d")" >> $GITHUB_OUTPUT

      # 上传固件
      - name: Upload Firmware
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt-firmware-${{ github.event.inputs.target_device }}-${{ steps.tag.outputs.release_date }}
          path: /builder/immortalwrt/bin/targets/*/*/immortalwrt-*.*

      # 上传配置文件
      - name: Upload Config
        uses: actions/upload-artifact@v4
        with:
          name: immortalwrt-config-${{ github.event.inputs.target_device }}-${{ steps.tag.outputs.release_date }}
          path: /builder/immortalwrt/.config

      # 创建发布
      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag.outputs.release_tag }}
          name: ImmortalWrt_${{ env.IMMORTALWRT_VERSION }}_${{ steps.tag.outputs.release_date }}
          files: /builder/immortalwrt/bin/targets/*/*/immortalwrt-*.*
          draft: false
          prerelease: false
