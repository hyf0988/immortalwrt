# [Source: 1]
name: Build ImmortalWrt x86_64 Minimal

on:
  workflow_dispatch:
    inputs:
      rootfs_size:
        description: '根分区大小 (MB)'
        required: true
        default: '1024'
      kernel_size:
        description: '内核分区大小 (MB)'
        required: true
        default: '32'

env:
  TZ: Asia/Shanghai
  FIRMWARE_VERSION: 'v24.10.2' # 锁定编译版本

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Initialize Build Environment
      run: |
        echo "=== 初始化构建环境 ==="
        df -h /

    - name: Free Up Disk Space
      run: |
        echo "=== 清理磁盘空间 ==="
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost /usr/local/go /opt/hostedtoolcache
        sudo docker image prune -a -f
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
        echo "=== 清理后磁盘状态 ==="
        df -h /

    - name: Install Dependencies
      run: |
        echo "=== 安装编译依赖 ==="
        sudo apt-get update -qq
        sudo apt-get install -y \
          build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libncursesw5-dev libssl-dev python3 \
          python3-dev python3-setuptools rsync swig unzip zlib1g-dev file wget \
          curl time xsltproc libelf-dev ccache

    - name: Set Build Variables
      run: |
        echo "REPO_BRANCH=openwrt-24.10" >> $GITHUB_ENV
        echo "REPO_VERSION=${{ env.FIRMWARE_VERSION }}" >> $GITHUB_ENV
        echo "OPENWRT_VERSION=24.10.2" >> $GITHUB_ENV
        echo "REPO_URL=https://github.com/immortalwrt/immortalwrt" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
        echo "FIRMWARE_SIZE=${{ github.event.inputs.rootfs_size }}" >> $GITHUB_ENV
        echo "KERNEL_SIZE=${{ github.event.inputs.kernel_size }}" >> $GITHUB_ENV

    - name: Clone Source Code
      run: |
        echo "=== 克隆 ImmortalWrt 源码 (${{ env.FIRMWARE_VERSION }}) ==="
        git clone --depth 1 -b $REPO_BRANCH $REPO_URL openwrt
        cd openwrt
        git fetch --depth 1 origin tag $REPO_VERSION
        git checkout $REPO_VERSION

    - name: Update and Install Feeds
      run: |
        echo "=== 更新和安装官方软件源 ==="
        cd openwrt
        # 移除了所有第三方软件源，只使用官方源
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Generate Configuration
      run: |
        echo "=== 生成编译配置 (精简版) ==="
        cd openwrt
        
        # 创建配置文件
        cat > .config << EOF
        # Target Platform
        CONFIG_TARGET_x86=y
        CONFIG_TARGET_x86_64=y
        CONFIG_TARGET_x86_64_DEVICE_generic=y
        
        # Target Images
        CONFIG_TARGET_KERNEL_PARTSIZE=${{ env.KERNEL_SIZE }}
        CONFIG_TARGET_ROOTFS_PARTSIZE=${{ env.FIRMWARE_SIZE }}
        CONFIG_TARGET_IMAGES_PAD=y
        CONFIG_GRUB_TIMEOUT="3"
        CONFIG_GRUB_TITLE="ImmortalWrt"
        CONFIG_GRUB_IMAGES=y
        CONFIG_GRUB_EFI_IMAGES=y
        CONFIG_TARGET_ROOTFS_EXT4FS=y
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        
        # Base System & Docker
        CONFIG_PACKAGE_luci=y
        CONFIG_PACKAGE_luci-ssl-openssl=y
        CONFIG_PACKAGE_luci-app-dockerman=y
        CONFIG_PACKAGE_docker=y
        CONFIG_PACKAGE_dockerd=y
        
        # Drivers
        CONFIG_PACKAGE_kmod-igc=y
        CONFIG_PACKAGE_kmod-r8125=y
        CONFIG_PACKAGE_kmod-igb=y
        CONFIG_PACKAGE_kmod-e1000e=y
        CONFIG_PACKAGE_kmod-r8169=y
        
        # USB and Storage
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-fs-ext4=y
        
        # Language Support
        CONFIG_PACKAGE_luci-i18n-base-zh-cn=y
        CONFIG_PACKAGE_luci-i18n-firewall-zh-cn=y
        CONFIG_PACKAGE_luci-i18n-opkg-zh-cn=y
        CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=y
        EOF
        
        make defconfig

    - name: Download Dependencies
      run: |
        echo "=== 下载编译依赖 ==="
        cd openwrt
        make download -j$(nproc)

    - name: Compile Firmware
      run: |
        echo "=== 开始编译固件 (过程会很长) ==="
        cd openwrt
        make -j1 V=s

    - name: Check Build Results
      run: |
        echo "=== 检查编译结果 ==="
        if [ ! -d "openwrt/bin/targets/x86/64" ] || [ -z "$(ls -A openwrt/bin/targets/x86/64)" ]; then
          echo "错误: 编译失败，未找到固件文件"
          exit 1
        else
          echo "编译成功，固件文件已生成。"
          ls -lh openwrt/bin/targets/x86/64/
        fi

    - name: Organize Firmware Files
      id: organize
      run: |
        FIRMWARE_PATH=$(find openwrt/bin/targets/x86/64 -type d | head -n 1)
        echo "FIRMWARE_PATH=${FIRMWARE_PATH}" >> $GITHUB_ENV
        echo "BUILD_SUCCESS=true" >> $GITHUB_ENV

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ImmortalWrt-${{ env.OPENWRT_VERSION }}-x86_64-${{ env.BUILD_DATE }}
        path: ${{ env.FIRMWARE_PATH }}
        retention-days: 7

    - name: Generate Release Info
      run: |
        echo "RELEASE_TAG=${{ env.OPENWRT_VERSION }}-${{ env.BUILD_DATE }}-$(date +'%H%M')" >> $GITHUB_ENV
        cat > release_notes.md << EOF
        ## ImmortalWrt ${{ env.OPENWRT_VERSION }} x86_64
        **构建时间**: ${{ env.BUILD_DATE }}
        
        **说明**: 此版本为精简版，不包含OpenClash, Passwall等第三方代理插件。
        EOF

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.RELEASE_TAG }}
        name: ImmortalWrt ${{ env.OPENWRT_VERSION }} x86_64 - ${{ env.BUILD_DATE }}
        body_path: release_notes.md
        files: ${{ env.FIRMWARE_PATH }}/*
        token: ${{ secrets.GITHUB_TOKEN }}
