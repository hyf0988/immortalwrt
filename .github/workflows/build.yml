# [Source: 1]
name: Build My Stable ImmortalWrt 24.10.2 (Minimal + Argo)

on:
  workflow_dispatch:
    inputs:
      stable_branch_name:
        description: '请输入您在自己仓库中创建的稳定版分支名称'
        required: true
        default: 'my-stable-24.10.2'
      rootfs_size:
        description: '根分区大小 (MB)'
        required: true
        default: '2048'
      kernel_size:
        description: '内核分区大小 (MB)'
        required: true
        default: '32'
      include_docker:
        description: '包含 Docker 支持'
        required: true
        default: true
        type: boolean

env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-22.04
    timeout-minutes: 360

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Free Up Disk Space
      run: |
        echo "=== 清理磁盘空间 ==="
        sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/share/boost /usr/local/go /opt/hostedtoolcache
        sudo docker image prune -a -f
        sudo apt-get clean
        sudo rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
        echo "=== 清理后磁盘状态 ==="
        df -h /

    - name: Install Dependencies
      run: |
        echo "=== 安装编译依赖 ==="
        sudo apt-get update -qq
        sudo apt-get install -y \
          build-essential clang flex bison g++ gawk gcc-multilib g++-multilib \
          gettext git libncurses5-dev libncursesw5-dev libssl-dev python3 \
          python3-dev python3-setuptools rsync swig unzip zlib1g-dev file wget \
          curl time xsltproc libelf-dev ccache

    - name: Set Build Variables
      run: |
        echo "REPO_BRANCH=${{ github.event.inputs.stable_branch_name }}" >> $GITHUB_ENV
        echo "REPO_URL=https://github.com/hyf0988/immortalwrt" >> $GITHUB_ENV
        echo "OPENWRT_VERSION=24.10.2" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
        echo "FIRMWARE_SIZE=${{ github.event.inputs.rootfs_size }}" >> $GITHUB_ENV
        echo "KERNEL_SIZE=${{ github.event.inputs.kernel_size }}" >> $GITHUB_ENV

    - name: Clone Source Code
      run: |
        echo "=== 克隆您的 ImmortalWrt 源码 (分支: ${{ env.REPO_BRANCH }}) ==="
        git clone --depth 1 -b $REPO_BRANCH $REPO_URL openwrt

    - name: Update and Install Feeds
      run: |
        echo "=== 更新和安装软件源 ==="
        cd openwrt
        # ✅ FIX: Add a stable third-party feed for the theme
        echo 'src-git sirpdboy https://github.com/sirpdboy/sirpdboy-package' >> feeds.conf.default
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Generate Configuration
      run: |
        echo "=== 生成编译配置 ==="
        cd openwrt
        
        cat > .config << EOF
        # Target Platform
        CONFIG_TARGET_x86=y
        CONFIG_TARGET_x86_64=y
        CONFIG_TARGET_x86_64_DEVICE_generic=y
        
        # Target Images
        CONFIG_TARGET_KERNEL_PARTSIZE=${{ env.KERNEL_SIZE }}
        CONFIG_TARGET_ROOTFS_PARTSIZE=${{ env.FIRMWARE_SIZE }}
        CONFIG_TARGET_IMAGES_PAD=y
        CONFIG_GRUB_TIMEOUT="3"
        CONFIG_GRUB_TITLE="ImmortalWrt"
        CONFIG_GRUB_IMAGES=y
        CONFIG_GRUB_EFI_IMAGES=y
        CONFIG_TARGET_ROOTFS_EXT4FS=y
        CONFIG_TARGET_ROOTFS_SQUASHFS=y
        
        # Base System
        CONFIG_PACKAGE_luci=y
        CONFIG_PACKAGE_luci-ssl-openssl=y
        
        # ✅ FIX: Add Argo theme
        CONFIG_PACKAGE_luci-theme-argo=y
        
        # Drivers
        CONFIG_PACKAGE_kmod-igc=y
        CONFIG_PACKAGE_kmod-r8125=y
        CONFIG_PACKAGE_kmod-igb=y
        CONFIG_PACKAGE_kmod-e1000e=y
        CONFIG_PACKAGE_kmod-r8169=y
        
        # USB and Storage
        CONFIG_PACKAGE_kmod-usb-core=y
        CONFIG_PACKAGE_kmod-usb2=y
        CONFIG_PACKAGE_kmod-usb3=y
        CONFIG_PACKAGE_kmod-fs-ext4=y
        
        # File Transfer
        CONFIG_PACKAGE_openssh-sftp-server=y
        CONFIG_PACKAGE_avahi-daemon=y

        # ✅ FIX: Add more complete Chinese Language Support
        CONFIG_PACKAGE_luci-i18n-base-zh-cn=y
        CONFIG_PACKAGE_luci-i18n-firewall-zh-cn=y
        CONFIG_PACKAGE_luci-i18n-opkg-zh-cn=y
        EOF
        
        if [ "${{ github.event.inputs.include_docker }}" == "true" ]; then
          cat >> .config << 'DOCKER_EOF'
        
        # Docker Support
        CONFIG_PACKAGE_luci-app-dockerman=y
        CONFIG_PACKAGE_docker=y
        CONFIG_PACKAGE_dockerd=y
        CONFIG_PACKAGE_luci-i18n-dockerman-zh-cn=y
        DOCKER_EOF
        fi
        
        make defconfig

    - name: Download Dependencies
      run: |
        echo "=== 下载编译依赖 ==="
        cd openwrt
        make
