name: Build ImmortalWrt with Image Builder

on:
  workflow_dispatch:
    inputs:
      rootfs_size:
        description: '请输入固件根分区的最终大小 (MB)'
        required: true
        default: '2048'
      router_ip:
        description: '请设置路由器的默认管理IP地址'
        required: true
        default: '192.168.8.1'

jobs:
  build:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare Build Environment
        id: prepare
        run: |
          # 创建用于存放自定义文件和最终固件的目录
          mkdir -p files/etc/config bin
          
          # 将自定义IP地址写入网络配置文件
          echo "LAN_IP=${{ github.event.inputs.router_ip }}" > files/etc/config/custom_lan_ip
          
          # 定义软件包列表 (已移除 passwall2)
          PACKAGES=" \
            luci \
            luci-ssl \
            ppp \
            luci-proto-ppp \
            luci-app-openclash \
            luci-app-homeproxy \
            luci-app-passwall \
            luci-app-dockerman \
            luci-lib-docker \
            docker \
            dockerd \
            kmod-igb \
            kmod-e1000e \
            kmod-r8169 \
            kmod-r8125 \
            kmod-igc \
            kmod-usb-core \
            kmod-usb2 \
            kmod-usb3 \
            kmod-fs-ext4 \
            kmod-fs-vfat \
            luci-i18n-base-zh-cn \
            luci-i18n-firewall-zh-cn \
            luci-i18n-dockerman-zh-cn \
            luci-i18n-passwall-zh-cn \
            luci-i18n-openclash-zh-cn \
            luci-i18n-homeproxy-zh-cn \
          "
          # 将软件包列表和根分区大小保存为输出，供后续步骤使用
          echo "packages=$(echo $PACKAGES | tr -s ' ')" >> $GITHUB_OUTPUT
          echo "rootfs_size=${{ github.event.inputs.rootfs_size }}" >> $GITHUB_OUTPUT

      - name: Build Firmware with Image Builder
        run: |
          # 运行官方的Image Builder Docker容器
          docker run --rm -i \
            --user root \
            -v ./bin:/home/build/immortalwrt/bin \
            -v ./files:/home/build/immortalwrt/files \
            immortalwrt/imagebuilder:x86-64-openwrt-24.10.2 \
            /bin/bash -c '
              # 添加包含第三方软件包的软件源
              echo "src/gz kenzok8_packages https://raw.githubusercontent.com/kenzok8/openwrt-packages/master" >> repositories.conf
              echo "src/gz kenzok8_small https://raw.githubusercontent.com/kenzok8/small/master" >> repositories.conf
              
              # 更新软件包列表
              make info
              
              # 开始构建镜像，添加 V=s 参数以输出详细日志
              make image V=s PROFILE="generic" PACKAGES="${{ steps.prepare.outputs.packages }}" FILES="files" ROOTFS_SIZE="${{ steps.prepare.outputs.rootfs_size }}"
            '

      - name: Organize Files and Create Info
        id: organize
        run: |
          # 查找生成的固件文件路径
          FIRMWARE_PATH=$(find ./bin/targets/x86/64 -type f -name "*squashfs-combined-efi.img.gz" | head -n 1)
          if [[ -z "$FIRMWARE_PATH" ]]; then
            echo "::error::固件文件未找到, 构建失败!"
            exit 1
          fi
          
          # 将固件路径设置为环境变量
          echo "FIRMWARE_PATH=$FIRMWARE_PATH" >> $GITHUB_ENV
          
          # 创建发布信息
          cat > ./router-info.md <<EOF
          ## 🚀 ImmortalWrt 24.10.2 (Image Builder 版)

          - 🏠 **后台地址**: ${{ github.event.inputs.router_ip }}
          - 👤 **用户名**: root
          - 🔑 **密码**: 无
          - 💾 **固件大小**: ${{ github.event.inputs.rootfs_size }} MB
          EOF

      - name: Upload Firmware to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ImmortalWrt-ImageBuilder-$(date +%Y-%m-%d)
          body_path: ./router-info.md
          files: |
            ${{ env.FIRMWARE_PATH }}
          token: ${{ secrets.GITHUB_TOKEN }}
          replace_latest: true
